{"version":3,"sources":["options/fields/icon.test.js"],"names":["jest","mock","mockedResult","describe","test","expect","inferIcon","toHaveBeenCalledTimes","params","icon","resolves","toBe","mockImplementationOnce","Promise","resolve","targetUrl","platform","result","toHaveBeenCalledWith","reject","Error","log","warn"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,yBAAV;AACAD,KAAKC,IAAL,CAAU,UAAV;;AAEA,IAAMC,eAAe,WAArB;;AAEAC,SAAS,mCAAT,EAA8C,YAAM;AAClDC,OAAK,qCAAL,0DAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1CC,mBAAOC,gBAAP,EAAkBC,qBAAlB,CAAwC,CAAxC;;AAEMC,kBAHoC,GAG3B;AACbC,oBAAM;AADO,aAH2B;AAAA;AAAA,mBAMpCJ,OAAO,oBAAKG,MAAL,CAAP,EAAqBE,QAArB,CAA8BC,IAA9B,CAAmCH,OAAOC,IAA1C,CANoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;AAQD,CATD;;AAWAN,SAAS,uCAAT,EAAkD,YAAM;AACtDC,OAAK,0BAAL,0DAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BE,6BAAUM,sBAAV,CAAiC;AAAA,qBAAMC,QAAQC,OAAR,CAAgBZ,YAAhB,CAAN;AAAA,aAAjC;AACMM,kBAFyB,GAEhB;AACbO,yBAAW,UADE;AAEbC,wBAAU;AAFG,aAFgB;AAAA;AAAA,mBAOV,oBAAKR,MAAL,CAPU;;AAAA;AAOzBS,kBAPyB;;;AAS/BZ,mBAAOY,MAAP,EAAeN,IAAf,CAAoBT,YAApB;AACAG,mBAAOC,gBAAP,EAAkBY,oBAAlB,CAAuCV,OAAOO,SAA9C,EAAyDP,OAAOQ,QAAhE;;AAV+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAaAb,WAAS,uCAAT,EAAkD,YAAM;AACtDC,SAAK,4BAAL,0DAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCE,+BAAUM,sBAAV,CAAiC;AAAA,uBAC/BC,QAAQM,MAAR,CAAe,IAAIC,KAAJ,CAAU,YAAV,CAAf,CAD+B;AAAA,eAAjC;AAGMZ,oBAJ2B,GAIlB;AACbO,2BAAW,UADE;AAEbC,0BAAU;AAFG,eAJkB;AAAA;AAAA,qBASZ,oBAAKR,MAAL,CATY;;AAAA;AAS3BS,oBAT2B;;AAUjCZ,qBAAOY,MAAP,EAAeN,IAAf,CAAoB,IAApB;AACAN,qBAAOC,gBAAP,EAAkBY,oBAAlB,CAAuCV,OAAOO,SAA9C,EAAyDP,OAAOQ,QAAhE;AACAX,qBAAOgB,mBAAIC,IAAX,EAAiBf,qBAAjB,CAAuC,CAAvC;;AAZiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnC;AAcD,GAfD;AAgBD,CA9BD","file":"icon.test.js","sourcesContent":["import log from 'loglevel';\nimport icon from './icon';\nimport { inferIcon } from '../../infer';\n\njest.mock('./../../infer/inferIcon');\njest.mock('loglevel');\n\nconst mockedResult = 'icon path';\n\ndescribe('when the icon parameter is passed', () => {\n  test('it should return the icon parameter', async () => {\n    expect(inferIcon).toHaveBeenCalledTimes(0);\n\n    const params = {\n      icon: './icon.png',\n    };\n    await expect(icon(params)).resolves.toBe(params.icon);\n  });\n});\n\ndescribe('when the icon parameter is not passed', () => {\n  test('it should call inferIcon', async () => {\n    inferIcon.mockImplementationOnce(() => Promise.resolve(mockedResult));\n    const params = {\n      targetUrl: 'some url',\n      platform: 'mac',\n    };\n\n    const result = await icon(params);\n\n    expect(result).toBe(mockedResult);\n    expect(inferIcon).toHaveBeenCalledWith(params.targetUrl, params.platform);\n  });\n\n  describe('when inferIcon resolves with an error', () => {\n    test('it should handle the error', async () => {\n      inferIcon.mockImplementationOnce(() =>\n        Promise.reject(new Error('some error')),\n      );\n      const params = {\n        targetUrl: 'some url',\n        platform: 'mac',\n      };\n\n      const result = await icon(params);\n      expect(result).toBe(null);\n      expect(inferIcon).toHaveBeenCalledWith(params.targetUrl, params.platform);\n      expect(log.warn).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"]}