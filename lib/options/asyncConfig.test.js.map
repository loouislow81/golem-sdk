{"version":3,"sources":["options/asyncConfig.test.js"],"names":["jest","mock","fields","mockImplementation","Promise","resolve","someField","test","param","another","expected","result","expect","toEqual"],"mappings":";;AAAA;;;;AACA;;;;;;;;AAEAA,KAAKC,IAAL,CAAU,UAAV;;AAEAC,iBAAOC,kBAAP,CAA0B;AAAA,SAAM,CAC9BC,QAAQC,OAAR,CAAgB;AACdC,eAAW;AADG,GAAhB,CAD8B,CAAN;AAAA,CAA1B;;AAMAC,KAAK,2CAAL,0DAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1CC,eAD0C,GAClC;AACZC,qBAAS,OADG;AAEZH,uBAAW;AAFC,WADkC;AAK1CI,kBAL0C,GAK/B;AACfD,qBAAS,OADM;AAEfH,uBAAW;AAFI,WAL+B;AAAA;AAAA,iBAU3B,2BAAYE,KAAZ,CAV2B;;AAAA;AAU1CG,gBAV0C;;AAWhDC,iBAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;;AAXgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlD","file":"asyncConfig.test.js","sourcesContent":["import asyncConfig from './asyncConfig';\nimport fields from './fields';\n\njest.mock('./fields');\n\nfields.mockImplementation(() => [\n  Promise.resolve({\n    someField: 'newValue',\n  }),\n]);\n\ntest('it should merge the result of the promise', async () => {\n  const param = {\n    another: 'field',\n    someField: 'oldValue',\n  };\n  const expected = {\n    another: 'field',\n    someField: 'newValue',\n  };\n\n  const result = await asyncConfig(param);\n  expect(result).toEqual(expected);\n});\n"]}