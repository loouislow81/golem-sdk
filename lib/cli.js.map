{"version":3,"sources":["cli.js"],"names":["dns","require","packageJson","collect","val","memo","push","parseJson","JSON","parse","getProcessEnvs","pEnv","processEnvs","checkInternet","lookup","err","code","console","log","main","module","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","process","argv","slice","length","help","error","appPath"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\nimport program from 'commander';\nimport golem from './index';\n\nconst dns = require('dns');\nconst packageJson = require('./../package');\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction parseJson(val) {\n  if (!val) return {};\n  return JSON.parse(val);\n}\n\nfunction getProcessEnvs(val) {\n  if (!val) return {};\n  const pEnv = {};\n  pEnv.processEnvs = parseJson(val);\n  return pEnv;\n}\n\nfunction checkInternet() {\n  dns.lookup('npmjs.com', (err) => {\n    if (err && err.code === 'ENOTFOUND') {\n      console.log('\\nNo Internet Connection\\nTo offline build, download electron from https://github.com/electron/electron/releases\\nand place in ~/AppData/Local/electron/Cache/ on Windows,\\n~/.cache/electron on Linux or ~/Library/Caches/electron/ on Mac\\nUse --electron-version to specify the version you downloaded.');\n    }\n  });\n}\n\n\nif (require.main === module) {\n  program\n    .version(packageJson.version)\n    .arguments('<targetUrl> [dest]')\n    .action((targetUrl, appDir) => {\n      program.targetUrl = targetUrl;\n      program.out = appDir;\n    })\n    .option('-n, --name <value>', 'app name')\n    .option('-p, --platform <value>', '\\'osx\\', \\'linux\\' or \\'windows\\'')\n    .option('-a, --arch <value>', '\\'ia32\\' or \\'x64\\' or \\'armv7l\\'')\n    .option('--app-version <value>', 'The release version of the application.  Maps to the `ProductVersion` metadata property on Windows, and `CFBundleShortVersionString` on OS X.')\n    .option('--build-version <value>', 'The build version of the application. Maps to the `FileVersion` metadata property on Windows, and `CFBundleVersion` on OS X.')\n    .option('--app-copyright <value>', 'The human-readable copyright line for the app. Maps to the `LegalCopyright` metadata property on Windows, and `NSHumanReadableCopyright` on OS X')\n    .option('--win32metadata <json-string>', 'a JSON string of key/value pairs of application metadata (ProductName, InternalName, FileDescription) to embed into the executable (Windows only).', parseJson)\n    .option('-e, --electron-version <value>', 'electron version to package, without the \\'v\\', see https://github.com/atom/electron/releases')\n    .option('--no-overwrite', 'do not override output directory if it already exists, defaults to false')\n    .option('-c, --conceal', 'packages the source code within your app into an archive, defaults to false, see http://electron.atom.io/docs/v0.36.0/tutorial/application-packaging/')\n    .option('--counter', 'if the target app should use a persistant counter badge in the dock (OSX only), defaults to false')\n    .option('-i, --icon <value>', 'the icon file to use as the icon for the app (should be a .icns file on OSX, .png for Windows and Linux)')\n    .option('--width <value>', 'set window default width, defaults to 1280px', parseInt)\n    .option('--height <value>', 'set window default height, defaults to 800px', parseInt)\n    .option('--min-width <value>', 'set window minimum width, defaults to 0px', parseInt)\n    .option('--min-height <value>', 'set window minimum height, defaults to 0px', parseInt)\n    .option('--max-width <value>', 'set window maximum width, default is no limit', parseInt)\n    .option('--max-height <value>', 'set window maximum height, default is no limit', parseInt)\n    .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n    .option('-f, --fast-quit', 'quit app after window close (OSX only), defaults to false')\n    .option('-u, --user-agent <value>', 'set the user agent string for the app')\n    .option('--honest', 'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser')\n    .option('--ignore-certificate', 'ignore certificate related errors')\n    .option('--ignore-gpu-blacklist', 'allow WebGl apps to work on non supported graphics cards')\n    .option('--enable-es3-apis', 'force activation of WebGl 2.0')\n    .option('--insecure', 'enable loading of insecure content, defaults to false')\n    .option('--flash', 'if flash should be enabled')\n    .option('--flash-path <value>', 'path to Chrome flash plugin, find it in `Chrome://plugins`')\n    .option('--disk-cache-size <value>', 'forces the maximum disk space (in bytes) to be used by the disk cache')\n    .option('--inject <value>', 'path to a CSS/JS file to be injected', collect, [])\n    .option('--full-screen', 'if the app should always be started in full screen')\n    .option('--maximize', 'if the app should always be started maximized')\n    .option('--hide-window-frame', 'disable window frame and controls')\n    .option('--verbose', 'if verbose logs should be displayed')\n    .option('--disable-context-menu', 'disable the context menu')\n    .option('--disable-dev-tools', 'disable developer tools')\n    .option('--zoom <value>', 'default zoom factor to use when the app is opened, defaults to 1.0', parseFloat)\n    .option('--internal-urls <value>', 'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)')\n    .option('--crash-reporter <value>', 'remote server URL to send crash reports')\n    .option('--single-instance', 'allow only a single instance of the application')\n    .option('--processEnvs <json-string>', 'a JSON string of key/value pairs to be set as environment variables before any browser windows are opened.', getProcessEnvs)\n    .option('--tray', 'allow app to stay in system tray')\n    .option('--basic-auth-username <value>', 'basic http(s) auth username')\n    .option('--basic-auth-password <value>', 'basic http(s) auth password')\n    .parse(process.argv);\n\n  if (!process.argv.slice(2).length) {\n    program.help();\n  }\n  checkInternet();\n  golem(program, (error, appPath) => {\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    if (!appPath) {\n      // app exists and --overwrite is not passed\n      return;\n    }\n    console.log(`App built to ${appPath}`);\n  });\n}\n"]}