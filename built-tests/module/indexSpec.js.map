{"version":3,"sources":["module/indexSpec.js"],"names":["PLATFORMS","tmp","setGracefulCleanup","assert","chai","checkApp","appPath","inputOptions","callback","relPathToConfig","platform","path","join","Error","golemConfigPath","golemConfig","JSON","parse","fs","readFileSync","strictEqual","targetUrl","exception","describe","testGolemModule","timeout","it","done","async","eachSeries","tmpObj","dirSync","unsafeCleanup","tmpPath","name","options","out","overwrite","error","err"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,YAAY,CAAC,QAAD,EAAW,OAAX,CAAlB;AACAC,cAAIC,kBAAJ;IACOC,M,GAAUC,c,CAAVD,M;;;AAEP,SAASE,QAAT,CAAmBC,OAAnB,EAA4BC,YAA5B,EAA0CC,QAA1C,EAAoD;AAClD,MAAI;AACF,QAAIC,wBAAJ;;AAEA,YAAQF,aAAaG,QAArB;AACE,WAAK,QAAL;AACED,0BAAkBE,eAAKC,IAAL,CAAU,qBAAV,EAAiC,wBAAjC,CAAlB;AACA;AACF,WAAK,OAAL;AACEH,0BAAkB,eAAlB;AACA;AACF,WAAK,OAAL;AACEA,0BAAkB,eAAlB;AACA;AACF;AACE,cAAM,IAAII,KAAJ,CAAU,sBAAV,CAAN;AAXJ;;AAcA,QAAMC,kBAAkBH,eAAKC,IAAL,CAAUN,OAAV,EAAmBG,eAAnB,EAAoC,YAApC,CAAxB;AACA,QAAMM,cAAcC,KAAKC,KAAL,CAAWC,aAAGC,YAAH,CAAgBL,eAAhB,CAAX,CAApB;;AAEAX,WAAOiB,WAAP,CAAmBb,aAAac,SAAhC,EAA2CN,YAAYM,SAAvD,EAAkE,mEAAlE;AACA;AACA;AACA;AACAb;AACD,GAzBD,CAyBE,OAAOc,SAAP,EAAkB;AAClBd,aAASc,SAAT;AACD;AACF;;AAEDC,SAAS,cAAT,EAAyB,SAASC,eAAT,GAA4B;AACnD,OAAKC,OAAL,CAAa,MAAb;AACAC,KAAG,oCAAH,EAAyC,UAACC,IAAD,EAAU;AACjDC,oBAAMC,UAAN,CAAiB7B,SAAjB,EAA4B,UAACU,QAAD,EAAWF,QAAX,EAAwB;AAClD,UAAMsB,SAAS7B,cAAI8B,OAAJ,CAAY,EAACC,eAAe,IAAhB,EAAZ,CAAf;;AAEA,UAAMC,UAAUH,OAAOI,IAAvB;AACA,UAAMC,UAAU;AACdD,cAAM,iBADQ;AAEdb,mBAAW,mBAFG;AAGde,aAAKH,OAHS;AAIdI,mBAAW,IAJG;AAKd3B,kBAAU;AALI,OAAhB;;AAQAyB,cAAQzB,QAAR,GAAmBA,QAAnB;AACA,2BAAMyB,OAAN,EAAe,UAACG,KAAD,EAAQhC,OAAR,EAAoB;AACjC,YAAIgC,KAAJ,EAAW;AACT9B,mBAAS8B,KAAT;AACA;AACD;;AAEDjC,iBAASC,OAAT,EAAkB6B,OAAlB,EAA2B,UAACI,GAAD,EAAS;AAClC/B,mBAAS+B,GAAT;AACD,SAFD;AAGD,OATD;AAUD,KAvBD,EAuBG,UAACD,KAAD,EAAW;AACZX,WAAKW,KAAL;AACD,KAzBD;AA0BD,GA3BD;AA4BD,CA9BD","file":"indexSpec.js","sourcesContent":["import tmp from 'tmp'\nimport chai from 'chai'\nimport fs from 'fs'\nimport path from 'path'\nimport async from 'async'\n\nimport golem from './../../lib/index'\n\nconst PLATFORMS = ['darwin', 'linux']\ntmp.setGracefulCleanup()\nconst {assert} = chai\n\nfunction checkApp (appPath, inputOptions, callback) {\n  try {\n    let relPathToConfig\n\n    switch (inputOptions.platform) {\n      case 'darwin':\n        relPathToConfig = path.join('google-test-app.app', 'Contents/Resources/app')\n        break\n      case 'linux':\n        relPathToConfig = 'resources/app'\n        break\n      case 'win32':\n        relPathToConfig = 'resources/app'\n        break\n      default:\n        throw new Error('Unknown app platform')\n    }\n\n    const golemConfigPath = path.join(appPath, relPathToConfig, 'golem.json')\n    const golemConfig = JSON.parse(fs.readFileSync(golemConfigPath))\n\n    assert.strictEqual(inputOptions.targetUrl, golemConfig.targetUrl, 'Packaged app must have the same targetUrl as the input parameters')\n    // app name is not consistent for linux\n    // assert.strictEqual(inputOptions.appName, golemConfig.name,\n    // 'Packaged app must have the same name as the input parameters');\n    callback()\n  } catch (exception) {\n    callback(exception)\n  }\n}\n\ndescribe('Golem Module', function testGolemModule () {\n  this.timeout(240000)\n  it('Can build an app from a target url', (done) => {\n    async.eachSeries(PLATFORMS, (platform, callback) => {\n      const tmpObj = tmp.dirSync({unsafeCleanup: true})\n\n      const tmpPath = tmpObj.name\n      const options = {\n        name: 'google-test-app',\n        targetUrl: 'http://google.com',\n        out: tmpPath,\n        overwrite: true,\n        platform: null\n      }\n\n      options.platform = platform\n      golem(options, (error, appPath) => {\n        if (error) {\n          callback(error)\n          return\n        }\n\n        checkApp(appPath, options, (err) => {\n          callback(err)\n        })\n      })\n    }, (error) => {\n      done(error)\n    })\n  })\n})\n"]}